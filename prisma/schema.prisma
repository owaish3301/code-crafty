// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
  // Skip generating engine (used with Prisma Accelerate)
  // engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models for NextAuth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  githubUserId  String?   @unique
  githubUsername String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  role          UserRole  @default(USER)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
}

// Application specific models
model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  repositoryUrl String?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  roadmap     Roadmap?
  logs        ProjectLog[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      ProjectStatus @default(IN_PROGRESS)
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

model Roadmap {
  id          String    @id @default(cuid())
  projectId   String    @unique
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  milestones  Milestone[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Milestone {
  id          String    @id @default(cuid())
  title       String
  description String?
  roadmapId   String
  roadmap     Roadmap   @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  tasks       Task[]
  order       Int
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  milestoneId String
  milestone   Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  order       Int
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProjectLog {
  id          String    @id @default(cuid())
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  title       String
  content     String    @db.Text
  type        LogType   @default(INFO)
  createdAt   DateTime  @default(now())
}

enum LogType {
  INFO
  WARNING
  ERROR
  SUCCESS
}
